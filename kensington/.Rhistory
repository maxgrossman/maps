install.packages("httr")
require(httr)
?add_headers
wmata.url <- "https://api.wmata.com/Bus.svc/json/jRoutes"
wmata.get <- GET(url=wmata.url,
add_headers(
Authorization=paste("bearer",readline(prompt="Enter an integer: "),sep=" ")))
wmata.dat
wmata.data
paste("bearer",readline(prompt="Enter an integer: "),sep=" ")
?system
wmata.get <- system('@ECHO OFF curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"')
wmata.get <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"')
wmata.get
wmata.get <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"')
wmata.get
wmata.get$
d
wmata.get <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"',
inter=TRUE)
wmata.get <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"',
intern=TRUE)
wmata.get <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"')
wmata.get <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"',
intern=TRUE)
wmata.get
wmata.routes <- system('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: dd7ff89ac1744089adfa326205e723b4"',
intern=TRUE)
?readLines
wmata.routes <- system(paste('curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: ',
readline(prompt="Provide API Key: "),' "',sep=""),intern=TRUE)
wmata.routes
install.packages("jsonlite")
require(jsonlite)
wmata.routes <- fromJSON(txt=system(paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: ',
readline(prompt="Provide API Key: "),
' "', sep=""),intern=TRUE))
wmata.routes
wmata.routes$Routes$RouteID
wmata.routes$Routes$LineDescription
wmata.routes$Routes$Name
for(route in wmata.routes$Routes$RouteID){
print(route)
}
?assign
wmata.paths <- fromJSON(txt=system(
paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=B30&Date=2016-11-04" -H "api_key: ',
readline(prompt="Provide API Key: "),
' "', sep="")
))
wmata.paths
wmata.paths <- fromJSON(system(
paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=B30&Date=2016-11-04" -H "api_key: ',
readline(prompt="Provide API Key: "),
' "', sep="")
))
wmata.paths <- fromJSON(system(
paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=B30&Date=2016-11-04" -H "api_key: ',
readline(prompt="Provide API Key: "),
' "', sep=""),intern=TRUE))
wmata.paths$RouteID
wmata.paths$Direction0$Stops
wmata.paths$Direction0$Shape
wmata.paths <- fromJSON(system(
paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=B30&Date',
readline(prompt="Provide date in format YYYY-DD-MM: "),'" -H "api_key: ',
readline(prompt="Provide API Key: "),
' "', sep=""),intern=TRUE))
# api parameters
key<-readline(prompt="Provide API Key: ")
date<-readline(prompt="Provide date in format YYYY-MM-DD: ")
for(route in wmata.routes$Routes$RouteID)
{
wmata.paths <- fromJSON(txt=system(
paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=',
route,'&Date=',date,'" -H "api_key: ',
key,' "', sep="")))
}
lst.wmata.path <- c()
for(route in wmata.routes$Routes$RouteID)
{
wmata.path <- fromJSON(txt=system(
paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=',
route,'&Date=',date,'" -H "api_key: ',
key,' "', sep=""),intern=TRUE))
lst.wmata.path[[length(lst.wmata.path)+1L]] <- wmata.path
}
length(lst.wmata.path)
lst.wmata.path[[1]]$RouteID
lst.wmata.path[[2]]$RouteID
lst.wmata.path[[2]]$Direction0
lst.wmata.path[[2]]$Direction0$Shape
lst.wmata.path[[2]]$Direction1
test<-SpatialLinesDataFrame(SpatialLines(list(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lat$Direction0$Shape$Lon,
lst.wmata.path[[2]]$Direction0$Shape$Lat))))
require(rgdal)
test<-SpatialLinesDataFrame(SpatialLines(list(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lat$Direction0$Shape$Lon,
lst.wmata.path[[2]]$Direction0$Shape$Lat))))
test<-SpatialLinesDataFrame(SpatialLines(list(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lat,
lst.wmata.path[[2]]$Direction0$Shape$Lat))))
lst.wmata.path[[2]]$Direction0$Shape$Lat
lst.wmata.path[[2]]$Direction0$Shape$Lat
lst.wmata.path[[2]]$Direction0$Shape
test<-SpatialLinesDataFrame(SpatialLines(list(Line(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lat,
lst.wmata.path[[2]]$Direction0$Shape$Lat)))))
test<-SpatialLinesDataFrame(SpatialLines(list(Line(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lon,
lst.wmata.path[[2]]$Direction0$Shape$Lat)))))
c1 = cbind(lst.wmata.path[[2]]$Direction0$Shape$Lat,lst.wmata.path[[2]]$Direction0$Shape$Lat)
L1 = Line(c1)
L1b = Lines(list(L1), ID = "a")
SL1 = SpatialLines(list(L1b))
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road"))
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")))
test<-SpatialLinesDataFrame(SpatialLines(list(Line(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lon,
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")))
test<-SpatialLinesDataFrame(SpatialLines(list(Line(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lon,
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")))
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")),row.names = c("a"))
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")),row.names = "a")
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")),row.names = ID)
test<-SpatialLinesDataFrame(SpatialLines(list(Line(cbind(lst.wmata.path[[2]]$Direction0$Shape$Lon,
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")))
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")))
SLDF = SpatialLinesDataFrame(SL1, data.frame(Z = c("Road")))
SLDF = SpatialLinesDataFrame(SL1)
SL1
plot(SL1)
SLDF = SpatialLinesDataFrame(SL1, lst.wmata.path[[2]])
lst.wmata.path[[2]]
lst.wmata.path[[2]]$Direction0
SLDF = SpatialLinesDataFrame(SL1, lst.wmata.path[[2]]$Direction0$Shape)
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json\?location\=41.0228,28.97834\&radius\=500\&type\=store\&keyword\=clothing\&key\=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI",
intern=TRUE)
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json\?location\=41.0228,28.97834\&radius\=500\&type\=store\&keyword\=clothing\&key\=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI",
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=41.0228,28.97834&radius=500&type=store&keyword=clothing&key=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI ",
intern=TRUE)
PortOIstanbul
system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json\?location\=41.0228,28.97834\&radius\=500\&type\=store\&keyword\=clothing\&key\=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI
")
system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json\?location\=41.0228,28.97834\&radius\=500\&type\=store\&keyword\=clothing\&key\=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI
")
)
""
'
"
system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json\?location\=41.0228,28.97834\&radius\=500\&type\=store\&keyword\=clothing\&key\=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8d\")
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=41.0228,28.97834&radius=500&type=store&keyword=clothing&key=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI ",
intern=TRUE)
PortOIstanbul
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=41.0228,28.97834&radius=500&type=store&keyword=clothing&key=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI",
intern=TRUE)
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=41.0228,28.97834&radius=500&type=store&keyword=clothing&key=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI",
PortOIstanbul<-system("curl https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=41.0228,28.97834&radius=500&type=store&keyword=clothing&key=AIzaSyDeki0wJx135kp6ViDjNKliZsQhLcxa8dI",
)
"
''
'
)
asdfasdfasd
fq3
45hwit3oj9-15]ertw
6t3445
()
()()
)()()()
setwd("/users/maxgrossman/github/maxgrossman/maps/kensington")
require(jsonlite)
require(rgdal)
require(raster)
# get lists of the jsons
stores <- list.files(".",".json")
sotres
stores
stores <- lapply(stores,function(x) fromJSON(x))
stores
stores[[1]]$results$place_id
stores[[1]]$results$types
stores[[1]]$status
stores[[1]]$results$geometry$viewport
stores[[1]]$results$address_components
stores[[1]]$results$formatted_address
stores[[1]]$results$types
stores <- lapply(stores,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(address=x$results$formatted_address)))
stores
stores
stores[[1]]$address
writeOGR(do.call(bind, ports_list),
".","portprox.shops",driver="ESRI Shapefile",
overwrite_layer = TRUE)
writeOGR(do.call(bind, stores),
".","mealeys_kens",driver="ESRI Shapefile",
overwrite_layer = TRUE)
