setwd("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data/ShopDistrict_shops")
require(jsonlite)
require(rgdal)
require(raster)
shops <- list.files(".",".json")
shops <- lapply(porth,function(x) fromJSON(x))
shops <- lapply(shops,function(x) fromJSON(x))
shops <- list.files(".",".json")
shops <- list.files(".",".json")
shops <- lapply(shops,function(x) fromJSON(x))
shops <- list.files(".",".json")
shops <- lapply(shops,function(x) fromJSON(x))
shops[[1]]
shops[[1]]$results$id
shops[[1]]$results$icon
shops[[1]]$results$id
shops[[1]]$results$name
shops[[1]]$results$scope
shops[[1]]$results$place_id
shops[[1]]$results$types
grep("food",shops[[1]]$results$types)
grep("restaurant",shops[[1]]$results$types)
shops[[1]][!grep("restaurant",shops[[1]]$results$types)]
shops[[1]][!grepl("restaurant",shops[[1]]$results$types),]
shops[[1]][!grepl("restaurant",shops[[1]]$results$types)]
length(shops[[1]][!grepl("restaurant",shops[[1]]$results$types)])
length(shops[[1]])
shops[[1]]$results
grepl("restaurant",shops[[1]]$results$types)
shops[[1]]$results$types
shops[[1]]$results$vicinity
shops[[1]]$results$types
grepl(c("restaurant","pharmacy"),shops[[1]]$results$types)
grep(c("restaurant","pharmacy"),shops[[1]]$results$types)
grep(paste(c("restaurant","pharmacy"),collapse='|'),shops[[1]]$results$types)
shops[[1]]$results$types
shops[[2]]$results$types
shops[[3]]$results$types
shops <- list.files(".",".json")
shops
shops <- lapply(shops,function(x) fromJSON(x))
shops[[1]]$results$id
shops[[3]]$results$id
shops[[3]]$results$name
shops[[3]]$results$name
shops[[2]]$results$name
shops[[1]]$results$name
shops[[1]]$results$types
shops[[2]]$results$types
shops[[1]]$results$types
shops[[2]]$results$types
shops[[3]]$results$types
shops[[1]]$results$types
shops[[2]]$results$types
shops[[3]]$results$types
shops[[4]]$results$types
shops[[5]]$results$types
shops[[5]]$results$geometry$location
shops[[4]]$results$geometry$location
shops[[3]]$results$geometry$location
shops[[4]]$results$geometry$location
shops[[3]]$results$geometry$location
shops[[2]]$results$geometry$location
shops[[1]]$results$geometry$location
shops[[2]]$results$geometry$location
shops[[3]]$results$geometry$location
shops[[4]]$results$geometry$location
shops[[5]]$results$geometry$location
shops[[6]]$results$geometry$location
shops[[7]]$results$geometry$location
shops[[8]]$results$geometry$location
shops[[7]]$results$geometry$location
shops[[8]]$results$geometry$location
shops[[7]]$results$geometry$location
shops[[7]]$results$geometry$location
shops[[1]][!grepl("restaurant",shops[[1]]$results$types),]
shops[[1]][!grepl("restaurant",shops[[1]]$results$types)]
shops <- lapply(shops,
function(x) x[!grep(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
shops[[1]]$results$types[[1]][1]
shops[[1]]$results$types[[1]]
shops[[1]]$results$type
shops[[1]]$results$type
shops <- list.files(".",".json")
shops <- lapply(shops,function(x) fromJSON(x))
shops[[1]]$results$type
shops[[1]]$results$type[[1]]
shops[[1]]$results$type
shops[[1]]$results$name
shops1 <- lapply(shops,
function(x) x[!grep(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
shop1
shops1
shops[[1]][!grep(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)]
shops[[1]][!grep(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),shops[[1]]$results$types)]
shops[[1]][!grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),shops[[1]]$results$types)]
shops1 <- lapply(shops,
function(x) x[!grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
shops1
shops1[[1]]
lenght(shops1[[1]])
length(shops1[[1]])
length(shops1[[2]])
length(shops1[[3]])
length(shops1[[4]])
length(shops1[[5]])
length(shops1[[6]])
length(shops1[[7]])
length(shops1[[8]])
length(shops1[[9]])
shops <- lapply(shops,
function(x) x[!grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
# make them spatial polygons, attributes are name and amentiy type (store type basically)
shops1 <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=x$results$types)))
shops[[1]]$results$name
shops[[1]]$results$types
shops <- lapply(shops,
function(x) x[!grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
shops
shops[[1]]
shops
shops[[1]]
shops <- list.files(".",".json")
shops <- lapply(shops,function(x) fromJSON(x))
shops[[1]]$next_page_token
shops <- lapply(shops,
function(x) x[!grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
shops <- list.files(".",".json")
shops <- lapply(shops,function(x) fromJSON(x))
# get rid of restuarants, pharmacy, cafe, and food
unwanted_shops <- lapply(shops,
function(x) x[!grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types)])
unwanted_shops
unwanted_shops[[1]]
unwanted_shops[[1]]
unwanted_shops <- lapply(shops,function(x) grepl(paste(
c("restaurant","pharmacy","cafe","food")),
collapse='|'),x$results$types)]))
unwanted_shops <- lapply(shops,function(x) grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types))
unwanted_shops
shops <- lapply(shops,function(x) fromJSON(x))
shops <- list.files(".",".json")
shops
shops <- lapply(shops,function(x) fromJSON(x))
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=x$results$types)))
data=data.frame(name=x$results$name,amenity=x$results$types)))
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=x$results$types))
)
function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,
fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors())
{
data.row.names <- if (check.rows && is.null(row.names))
function(current, new, i) {
if (is.character(current))
new <- as.character(new)
if (is.character(new))
current <- as.character(current)
if (anyDuplicated(new))
return(current)
if (is.null(current))
return(new)
if (all(current == new) || all(current == ""))
return(new)
stop(gettextf("mismatch of row names in arguments of 'data.frame', item %d",
i), domain = NA)
}
else function(current, new, i) {
if (is.null(current)) {
if (anyDuplicated(new)) {
warning(gettextf("some row.names duplicated: %s --> row.names NOT used",
paste(which(duplicated(new)), collapse = ",")),
domain = NA)
current
}
else new
}
else current
}
object <- as.list(substitute(list(...)))[-1L]
mirn <- missing(row.names)
mrn <- is.null(row.names)
x <- list(...)
n <- length(x)
if (n < 1L) {
if (!mrn) {
if (is.object(row.names) || !is.integer(row.names))
row.names <- as.character(row.names)
if (anyNA(row.names))
stop("row names contain missing values")
if (anyDuplicated(row.names))
stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),
collapse = ", ")), domain = NA)
}
else row.names <- integer()
return(structure(list(), names = character(), row.names = row.names,
class = "data.frame"))
}
vnames <- names(x)
if (length(vnames) != n)
vnames <- character(n)
no.vn <- !nzchar(vnames)
vlist <- vnames <- as.list(vnames)
nrows <- ncols <- integer(n)
for (i in seq_len(n)) {
xi <- if (is.character(x[[i]]) || is.list(x[[i]]))
as.data.frame(x[[i]], optional = TRUE, stringsAsFactors = stringsAsFactors)
else as.data.frame(x[[i]], optional = TRUE)
nrows[i] <- .row_names_info(xi)
ncols[i] <- length(xi)
namesi <- names(xi)
if (ncols[i] > 1L) {
if (length(namesi) == 0L)
namesi <- seq_len(ncols[i])
vnames[[i]] <- if (no.vn[i])
namesi
else paste(vnames[[i]], namesi, sep = ".")
}
else if (length(namesi)) {
vnames[[i]] <- namesi
}
else if (fix.empty.names && no.vn[[i]]) {
tmpname <- deparse(object[[i]], nlines = 1L)[1L]
if (substr(tmpname, 1L, 2L) == "I(") {
ntmpn <- nchar(tmpname, "c")
if (substr(tmpname, ntmpn, ntmpn) == ")")
tmpname <- substr(tmpname, 3L, ntmpn - 1L)
}
vnames[[i]] <- tmpname
}
if (mirn && nrows[i] > 0L) {
rowsi <- attr(xi, "row.names")
if (any(nzchar(rowsi)))
row.names <- data.row.names(row.names, rowsi,
i)
}
nrows[i] <- abs(nrows[i])
vlist[[i]] <- xi
}
nr <- max(nrows)
for (i in seq_len(n)[nrows < nr]) {
xi <- vlist[[i]]
if (nrows[i] > 0L && (nr%%nrows[i] == 0L)) {
xi <- unclass(xi)
fixed <- TRUE
for (j in seq_along(xi)) {
xi1 <- xi[[j]]
if (is.vector(xi1) || is.factor(xi1))
xi[[j]] <- rep(xi1, length.out = nr)
else if (is.character(xi1) && inherits(xi1,
"AsIs"))
xi[[j]] <- structure(rep(xi1, length.out = nr),
class = class(xi1))
else if (inherits(xi1, "Date") || inherits(xi1,
"POSIXct"))
xi[[j]] <- rep(xi1, length.out = nr)
else {
fixed <- FALSE
break
}
}
if (fixed) {
vlist[[i]] <- xi
next
}
}
stop(gettextf("arguments imply differing number of rows: %s",
paste(unique(nrows), collapse = ", ")), domain = NA)
}
value <- unlist(vlist, recursive = FALSE, use.names = FALSE)
vnames <- unlist(vnames[ncols > 0L])
if (fix.empty.names && any(noname <- !nzchar(vnames)))
vnames[noname] <- paste("Var", seq_along(vnames), sep = ".")[noname]
if (check.names) {
if (fix.empty.names)
vnames <- make.names(vnames, unique = TRUE)
else {
nz <- nzchar(vnames)
vnames[nz] <- make.names(vnames[nz], unique = TRUE)
}
}
names(value) <- vnames
if (!mrn) {
if (length(row.names) == 1L && nr != 1L) {
if (is.character(row.names))
row.names <- match(row.names, vnames, 0L)
if (length(row.names) != 1L || row.names < 1L ||
row.names > length(vnames))
stop("'row.names' should specify one of the variables")
i <- row.names
row.names <- value[[i]]
value <- value[-i]
}
else if (!is.null(row.names) && length(row.names) !=
nr)
stop("row names supplied are of the wrong length")
}
else if (!is.null(row.names) && length(row.names) != nr) {
warning("row names were found from a short variable and have been discarded")
row.names <- NULL
}
if (is.null(row.names))
row.names <- .set_row_names(nr)
else {
if (is.object(row.names) || !is.integer(row.names))
row.names <- as.character(row.names)
if (anyNA(row.names))
stop("row names contain missing values")
if (anyDuplicated(row.names))
stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),
collapse = ", ")), domain = NA)
}
attr(value, "row.names") <- row.names
attr(value, "class") <- "data.frame"
value
}
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=x$results$types))
)
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=unlist(x$results$types)))
)
?unlist
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=unlist(x$results$types,recursive = TRUE)))
)
shops[[1]]$results$types
unlist(shops[[1]]$results$types
)
shops[[1]]$results$types[[1]]
shops[[1]]$results$types[[1]][1]
shops[[1]]$results$types[[2]][1]
shops[[1]]$results$types[[3]][1]
shops[[1]]$results$types[[4]][1]
shops[[1]]$results$types[[1]]
shops[[1]]$results$types
data.frame(name=shops[[1]]$results$name,amenity=shops[[1]]$results$types[[1]])
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name,amenity=x$results$types[[1]]))
)
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name)))
unwanted_shops[[1]]
shops[[1]][unwanted_shops[[1]]]
shops[[1]][unwanted_shops[[1]],]
unwanted_shops[[1]]
unwanted_shops <- lapply(shops,function(x) !grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types))
shops[[1]][unwanted_shops[[1]],]
unwanted_shops
unwanted_shops[[1]]
shops <- list.files(".",".json")
shops <- lapply(shops,function(x) fromJSON(x))
# list with lists of shops I do not want for each json. I'll use this after
# I make my list spatial data frames to subset each spdf accordingly.
unwanted_shops <- lapply(shops,function(x) grepl(paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types))
unwanted_shops
shops <- lapply(shops,
function(x)
SpatialPointsDataFrame(
SpatialPoints(
cbind(x$results$geometry$location$lng,x$results$geometry$location$lat),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")),
data=data.frame(name=x$results$name)))
shops[[1]][!unwanted_shops[[1]],]
shops1 <- shops
for(i in length(shops1){
shops1[i] <- shops1[i][!unwanted_shops[[1]],]
for(i in seq(1:length(shops1)) {
shops1[i] <- shops1[i][!unwanted_shops[[1]],]
for(val in seq(1,length(shops), by= 1)) {
shops1[i] <- shops1[i][!unwanted_shops[[1]],]
}
for(i in seq(1,length(shops), by= 1)) {
shops1[i] <- shops1[i][!unwanted_shops[[1]],]
}
shops1[i][!unwanted_shops[[1]]
,]
shops[[1]][!unwanted_shops[[1]],]
for(i in seq(1,length(shops), by= 1)) {
shops1[i] <- shops1[[i]][!unwanted_shops[[1]],]
}
shops1
shops1[[1]]
shops1[[2]]
shops1 <- shops
for(i in seq(1,length(shops), by= 1)) {
shops1[i] <- shops1[[i]][!unwanted_shops[[i]],]
}
shops1[[1]]
shops1[[1]]$name
shops[[1]]$name
unwanted_shops <- lapply(shops,function(x) grepl(!paste(
c("restaurant","pharmacy","cafe","food"),
collapse='|'),x$results$types))
for(i in seq(1,length(shops), by= 1)) {
shops[i] <- shops[[i]][!unwanted_shops[[i]],]
}
shops[[1]]
writeOGR(do.call(bind, shops),
".","ShopDistStores",driver="ESRI Shapefile",
overwrite_layer = TRUE)
hubpoints<-coordinates(c(28.966947,29.033588),c(41.030028,41.051700)
)
?coordinate
?coordinates
hubpoints<-coordinates(c('28.966947','29.033588'),c('41.030028','41.051700'))
hubpoints<-coordinates(cbind(c(28.966947,29.033588),c(41.030028,41.051700)))
data <- data.frame(hubs="Istiklal/Abdi","Nispetiye~Istiklal/Abdi")
hubpoints<-SpatialPoints(
coordinates(cbind(c(28.966947,29.033588),c(41.030028,41.051700))))
data <- data.frame(hubs="Istiklal/Abdi","Nispetiye~Istiklal/Abdi")
hubs <- SpatialPointsDataFrame(hubpoints,data)
data <- data.frame(hubs=c("Istiklal/Abdi","Nispetiye~Istiklal/Abdi"))
hubs <- SpatialPointsDataFrame(hubpoints,data)
writeORG("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",)
writeORG("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",
"hubs")
writeOGR("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",
"hubs",driver="ESRI Shapefile")
writeOGR(hubs,"/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",
"hubs",driver="ESRI Shapefile")
readOGR("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",ports)
ports<-readOGR("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",
'ports')
ports
ports$port
topcular<-ports[3]
topcular<-ports[3,]
ports
topcular
ls
pwd
ls
to
names(topcular)
names(topcular)<-"hubs"
merge(hubs,topcular)
'hubs')
ports<-readOGR("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",
'hubs')
ports<-readOGR("/Users/maxgrossman/github/maxgrossman/maps/istanbul/data",
'hubs_')
ports$hubs
